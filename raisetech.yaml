AWSTemplateFormatVersion: "2010-09-09"
Description: First learn CloudFormation
# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  DBUsername:
    NoEcho: false
    Description: Username for MySQL database access
    Type: String
    MinLength: 4
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: false
    Description: Password MySQL database access
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.


# ------------------------------------------------------------#
# Resources
# ------------------------------------------------------------#
Resources:
# -------------------------------------------------- #
# VPC
# -------------------------------------------------- #
  cfVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: cf-raisetech-VPC
# -------------------------------------------------- #
# Subnet
# -------------------------------------------------- #
  # Public AZ1a
  PublicSubnetAZ1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: cf-public-subnet-1a
      VpcId: !Ref cfVPC
  # Private AZ1a
  PrivateSubnetAZ1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: cf-private-subnet-1a
      VpcId: !Ref cfVPC
  # Public AZ1c
  PublicSubnetAZ1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.30.0/24
      Tags:
        - Key: Name
          Value: cf-public-subnet-1c
      VpcId: !Ref cfVPC
  # Private AZ1c
  PrivateSubnetAZ1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.0.40.0/24
      Tags:
        - Key: Name
          Value: cf-private-subnet-1c
      VpcId: !Ref cfVPC
# -------------------------------------------------- #
# IGW
# -------------------------------------------------- #
  cfIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: cf-igw
# -------------------------------------------------- #
# VPC-Gateway-Attachment
# -------------------------------------------------- #
  cfIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref cfVPC
      InternetGatewayId: !Ref cfIGW
# -------------------------------------------------- #
# RouteTable
# -------------------------------------------------- #
  cfRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref cfVPC
      Tags:
        - Key: Name
          Value: cf-routetable
# -------------------------------------------------- #
# Route
# -------------------------------------------------- #
  cfPublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: cfIGW
    Properties:
      RouteTableId: !Ref cfRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref cfIGW
# -------------------------------------------------- #
# Subnet-RouteTable-Association
# -------------------------------------------------- #
  cfSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ1a
      RouteTableId: !Ref cfRouteTable


# -------------------------------------------------- #
# EC2-SecurityGroup
# -------------------------------------------------- #
  cfSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh,http
      VpcId: !Ref cfVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
# -------------------------------------------------- #
# EC2Instance
# -------------------------------------------------- #
  cfEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06631ebafb3ae5d34
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 10
          VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetAZ1a
          GroupSet:
            - !Ref cfSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum install -y git
          yum install -y mysql
          yum install -y httpd
          service httpd start
      Tags:
          - Key: Name
            Value: cf-EC2


# -------------------------------------------------- #
# DBSubnetGroup
# -------------------------------------------------- #
  cfDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: PrivateSubnet 1a and 1c
      SubnetIds:
        - !Ref PrivateSubnetAZ1a
        - !Ref PrivateSubnetAZ1c
# -------------------------------------------------- #
# DBParameterGroup
# -------------------------------------------------- #
  cfDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: CloudFormation paramter group
      Family: MySQL8.0
      Parameters:
        character_set_database: utf8mb4
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
# -------------------------------------------------- #
# DBInstance
# -------------------------------------------------- #
  cfDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: cfDB
      AllocatedStorage: 25
      DBInstanceClass: db.t2.micro
      DBParameterGroupName: !Ref cfDBParameterGroup
      DBSubnetGroupName: !Ref cfDBSubnetGroup
      DBSecurityGroups:
        -  !Ref cfDBSG
      MultiAZ: true
      Engine: MySQL
      EngineVersion: 8.0.20
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      StorageType: gp2
# -------------------------------------------------- #
# DB-SecurityGroup MySQL
# -------------------------------------------------- #
  cfDBSG:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: DBSecurityGroup
      DBSecurityGroupIngress:
        -
          EC2SecurityGroupId: !Ref cfSecurityGroup
      EC2VpcId: !Ref cfVPC


# -------------------------------------------------- #
# EBSV2 ALB
# -------------------------------------------------- #
  cfALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: cfALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref cfALBSG
      Subnets:
        - !Ref PublicSubnetAZ1a
        - !Ref PublicSubnetAZ1c
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref cfALBlogBucket
      Tags:
        - Key: Name
          Value: cfALB
# -------------------------------------------------- #
#  ALB-SecurityGroup
# -------------------------------------------------- #
  cfALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: cfALB-SG
      GroupDescription: Allow http
      VpcId: !Ref cfVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
# -------------------------------------------------- #
#  ALB-TargetGroup
# -------------------------------------------------- #
  cfALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: cfALBTargetGroup
      Port: 80
      Protocol: HTTP
      Targets:
      - Id: !Ref cfEC2
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref cfVPC
# -------------------------------------------------- #
#  ALB-Listener
# -------------------------------------------------- #
  cfHTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref cfALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref cfALB
      Port: 80
      Protocol: HTTP


# -------------------------------------------------- #
# S3 Bucket
# -------------------------------------------------- #
  cfALBlogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: alb-accesslogs-raisetech
      LifecycleConfiguration:
        Rules:
          # 14 days delete
          - Id: AutoDelete
            Status: Enabled # Rule apply
            ExpirationInDays: 7
          - Id: NoncurrentVersionExpiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 4
      # access control
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # version management
      VersioningConfiguration:
        Status: Enabled
# -------------------------------------------------- #
# S3 BucketPolicy
# -------------------------------------------------- #
  cfALBlogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref cfALBlogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AlbWriteAccess
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::582318560864:root
            # Adds an object to a bucket
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${cfALBlogBucket}/AWSLogs/*
          - Sid: AWSLogDeliveryWrite
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${cfALBlogBucket}/*
            Principal:
              Service: delivery.logs.amazonaws.com
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSLogDeliveryAclCheck
            Effect: Allow
            Action:
              - s3:GetBucketAcl
            Resource:
              - !Sub arn:aws:s3:::${cfALBlogBucket}
            Principal:
              Service: delivery.logs.amazonaws.com


# ------------------------------------------------------------#
# Outputs
# ------------------------------------------------------------#
Outputs:
  EC2PublicIP:
    Value: !GetAtt cfEC2.PublicIp
    Description: Public IP of EC2 instance
  DBEndpoint:
    Value: !GetAtt cfDBInstance.Endpoint.Address
    Description: Endpoint of DB instance
  ALBDNS:
    Value: !GetAtt cfALB.DNSName
    Description: Public DNS Name
